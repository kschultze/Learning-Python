# -*- coding: utf-8 -*-
"""
Created on Fri Dec 15 10:34:11 2017

@author: kschultze

break up entry into groups of 3 digits

23456789 becomes 23 456 789
use 0-999 code to get the prefix (i.e. 456 - four hundred fifty-six = 22)
then use the group number to get the suffix (i.e. 2nd group ends in 'thousand' = 8)
don't forget spaces in between

"""
def maxTweet(maxWordLength):
    numberLength = [0,3,3,5,4,4,3,5,5,4,3,6,6,8,8,7,7,9,8,8,6,10,10,12,11,11,10,12,12,11,6,10,10,12,11,11,10,12,12,11,5,9,9,11,10,10,9,11,11,10,5,9,9,11,10,10,9,11,11,10,5,9,9,11,10,10,9,11,11,10,7,11,11,13,12,12,11,13,13,12,6,10,10,12,11,11,10,12,12,11,6,10,10,12,11,11,10,12,12,11,11,15,15,17,16,16,15,17,17,16,15,18,18,20,20,19,19,21,20,20,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,11,15,15,17,16,16,15,17,17,16,15,18,18,20,20,19,19,21,20,20,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,13,17,17,19,18,18,17,19,19,18,17,20,20,22,22,21,21,23,22,22,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,21,25,25,27,26,26,25,27,27,26,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,12,16,16,18,17,17,16,18,18,17,16,19,19,21,21,20,20,22,21,21,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,12,16,16,18,17,17,16,18,18,17,16,19,19,21,21,20,20,22,21,21,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,11,15,15,17,16,16,15,17,17,16,15,18,18,20,20,19,19,21,20,20,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,17,21,21,23,22,22,21,23,23,22,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,13,17,17,19,18,18,17,19,19,18,17,20,20,22,22,21,21,23,22,22,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,21,25,25,27,26,26,25,27,27,26,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,13,17,17,19,18,18,17,19,19,18,17,20,20,22,22,21,21,23,22,22,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,21,25,25,27,26,26,25,27,27,26,20,24,24,26,25,25,24,26,26,25,20,24,24,26,25,25,24,26,26,25,12,16,16,18,17,17,16,18,18,17,16,19,19,21,21,20,20,22,21,21,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,18,22,22,24,23,23,22,24,24,23,20,24,24,26,25,25,24,26,26,25,19,23,23,25,24,24,23,25,25,24,19,23,23,25,24,24,23,25,25,24]

    maxLength = 0
    prefixDic = {}
    for i in range(1000):
        if numberLength[i] > maxLength:
            prefixDic[numberLength[i]] = padZero(i)
            maxLength = numberLength[i]      
    
    #map number of groups of 3 zeros (3 = 9 zeros = trillion) to number of letters in suffix
    groupLengths = [0,8,7,7,8,11,11,10,10,9,9,9]
    
    numGroups = 0
    
    for prefix in prefixDic.keys():    
        if prefix >= maxWordLength:
            return int(prefixDic[prefix]) - 1
    
    suffixTail = ''
    suffixTailLength = 0
    while numGroups < 11:
        numGroups += 1
        for prefix in prefixDic.keys():
            numLength = 3 + sum(groupLengths[:numGroups+1]) + prefix + suffixTailLength + numGroups*2 #letters in 'one' + group name (i.e. thousands) + suffix + number of spaces needed
            print int('1' + prefixDic[prefix] + suffixTail)
            print numLength
            if numLength >= maxWordLength:
                return int('1' + prefixDic[prefix] + suffixTail) - 1

        suffixTail = '373'*numGroups
        suffixTailLength = numGroups*prefixDic.keys()[-1]
        #print 'suffixTailLength = ', suffixTailLength
        for prefix in prefixDic.keys():
            numLength  = prefix + sum(groupLengths[:numGroups+1]) + suffixTailLength + numGroups*2
            print int(prefixDic[prefix] + suffixTail)
            print numLength
            if numLength >= maxWordLength:
                return int(prefixDic[prefix] + suffixTail) - 1
    
def padZero(num):
    """pads zeroes onto left of a number so that it's always at least 3 digits
    returns string of that number"""
    
    numStr = str(num)
    if len(numStr) == 1:
        return '00' + numStr
    elif len(numStr) == 2:
        return '0' + numStr
    else: return numStr




    
    
#i = 14
#try:
#    if prefixDic['h'] < i:
#        print 'test worked'
#except KeyError:
#    print 'test also worked'